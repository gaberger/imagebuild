
%pre --log /tmp/sah-pre.log
#!/bin/bash

#Environment

echo "HostName=\"${HostName}\"" >> /tmp/ks_post_include.txt
echo "Gateway=\"${Gateway}\"" >> /tmp/ks_post_include.txt
echo "NameServers=\"${NameServers}\"" >> /tmp/ks_post_include.txt
echo "NTPServers=\"${NTPServers}\"" >> /tmp/ks_post_include.txt

echo "declare -A bonds" >> /tmp/ks_post_include.txt
echo "declare -A bond_opts" >> /tmp/ks_post_include.txt
echo "declare -A bond_ifaces" >> /tmp/ks_post_include.txt 
echo "declare -A bridges" >> /tmp/ks_post_include.txt
echo "declare -A bridge_iface" >> /tmp/ks_post_include.txt

echo "bonds[${extern_bond_name}]=\"${extern_boot_opts}\"" >> /tmp/ks_post_include.txt
echo "bond_opts[${extern_bond_name}]=\"${extern_bond_opts}\"" >> /tmp/ks_post_include.txt
echo "bond_ifaces[${extern_bond_name}]=\"${extern_ifaces}\"" >> /tmp/ks_post_include.txt

echo "bonds[${internal_bond_name}]=\"${internal_boot_opts}\"" >> /tmp/ks_post_include.txt
echo "bond_opts[${internal_bond_name}]=\"${internal_bond_opts}\"" >> /tmp/ks_post_include.txt
echo "bond_ifaces[${internal_bond_name}]=\"${internal_ifaces}\"" >> /tmp/ks_post_include.txt

echo "bonds[${mgmt_bond_name}]=\"${mgmt_boot_opts}\"" >> /tmp/ks_post_include.txt

echo "bonds[${prov_bond_name}]=\"${prov_boot_opts}\"" >> /tmp/ks_post_include.txt

echo "bonds[${stor_bond_name}]=\"${stor_boot_opts}\"" >> /tmp/ks_post_include.txt

echo "bonds[${priv_api_bond_name}]=\"${priv_api_boot_opts}\"" >> /tmp/ks_post_include.txt

echo "bonds[${pub_api_bond_name}]=\"${pub_api_boot_opts}\"" >> /tmp/ks_post_include.txt

echo "bridges[br-mgmt]=\"${br_mgmt_boot_opts}\"" >> /tmp/ks_post_include.txt
echo "bridge_iface[br-mgmt]=\"${mgmt_bond_name}\"" >> /tmp/ks_post_include.txt

echo "bridges[br-prov]=\"${br_prov_boot_opts}\"" >> /tmp/ks_post_include.txt
echo "bridge_iface[br-prov]=\"${prov_bond_name}\"" >> /tmp/ks_post_include.txt

echo "bridges[br-stor]=\"${br_stor_boot_opts}\"" >> /tmp/ks_post_include.txt
echo "bridge_iface[br-stor]=\"${stor_bond_name}\"" >> /tmp/ks_post_include.txt

echo "bridges[br-priv-api]=\"${br_priv_api_boot_opts}\"" >> /tmp/ks_post_include.txt
echo "bridge_iface[br-priv-api]=\"${priv_api_bond_name}\"" >> /tmp/ks_post_include.txt

echo "bridges[br-pub-api]=\"${br_pub_api_boot_opts}\"" >> /tmp/ks_post_include.txt
echo "bridge_iface[br-pub-api]=\"${pub_api_bond_name}\"" >> /tmp/ks_post_include.txt




# Network configuration
Gateway="CHANGEME e.g. 10.148.44.254"
NameServers="CHANGEME e.g. 10.148.44.11"
NTPServers="0.centos.pool.ntp.org"

# Installation interface configuration
# Format is "ip/netmask interface no"
anaconda_interface="CHANGEME e.g. 10.148.44.211/255.255.255.0 em4 no"

# Bonding and Bridge configuration. These variables are bash associative arrays and take the form of array[key]="value".
# Specifying a key more than once will overwrite the first key. For example:

# Define the bonds
# Bond to handle external traffic
extern_bond_name="CHANGEME e.g. bond1"
extern_boot_opts="onboot none"
extern_bond_opts="mode=802.3ad miimon=100"
extern_ifaces="CHANGEME e.g. em2 p1p2"

# Bond to handle internal traffic
internal_bond_name="CHANGEME e.g. bond0"
internal_boot_opts="onboot none"
internal_bond_opts="mode=802.3ad miimon=100"
internal_ifaces="CHANGEME e.g. em1 p1p1"

# Management
mgmt_bond_name="CHANGEME e.g. bond0.110"
mgmt_boot_opts="onboot none vlan"

# Provisioning
prov_bond_name="CHANGEME e.g. bond0.120"
prov_boot_opts="onboot none vlan"

# Storage
stor_bond_name="CHANGEME e.g. bond0.170"
stor_boot_opts="onboot none vlan"

# Public API
pub_api_bond_name="CHANGEME e.g. bond1.190"
pub_api_boot_opts="onboot none vlan"

# Private API
priv_api_bond_name="CHANGEME e.g. bond0.140"
priv_api_boot_opts="onboot none vlan"

# Define the bridges
# Management bridge options
br_mgmt_boot_opts="onboot static 192.168.110.12/255.255.255.0"

# Provisioning bridge options
br_prov_boot_opts="CHANGEME e.g. onboot static 192.168.120.12/255.255.255.0"

# Storage bridge options
br_stor_boot_opts="CHANGEME e.g. onboot static 192.168.170.12/255.255.255.0"

# Public API bridge options
br_pub_api_boot_opts="CHANGEME e.g. onboot static 192.168.190.12/255.255.255.0"

# Private API bridge options
br_priv_api_boot_opts="CHANGEME e.g. onboot static 192.168.140.12/255.255.255.0"

################### END of CHANGEME

read -a itmp <<< $( tr '/' ' ' <<< ${anaconda_interface} )

echo "network --activate --noipv6 --device=${itmp[2]} --bootproto=static --ip=${itmp[0]}" \
     " --netmask=${itmp[1]} --hostname=${HostName} --gateway=${Gateway} --nameserver=${NameServers}" \
     >> /tmp/ks_include.txt


[[ ${itmp[2]} ]] && { 
  echo "AnacondaIface_device=\"${itmp[2]}\"" >> /tmp/ks_post_include.txt 
  }

[[ ${itmp[3]} = no ]] && { 
  echo "AnacondaIface_noboot=\"${itmp[3]}\"" >> /tmp/ks_post_include.txt 
  }

# Configure Bonding and VLANS
#
for bond in ${!bonds[@]}
do
  read parms <<< $( tr -d '\r' <<< ${bonds[$bond]} )

  unset bond_info
  declare -A bond_info=(  \
                         [DEVICE]="${bond}" \
                         [PROTO]="dhcp" \
                         [ONBOOT]="no"      \
                         [NM_CONTROLLED]="no"      \
                         )

  for parm in ${parms}
  do
    case $parm in
          promisc ) bond_info[PROMISC]="yes"
                   ;;

          onboot ) bond_info[ONBOOT]="yes"
                   ;;

            none ) bond_info[PROTO]="none"
                   ;;

          static ) bond_info[PROTO]="static"
                   ;;

            dhcp ) bond_info[PROTO]="dhcp"
                   ;;

            vlan ) bond_info[VLAN]="yes"
                   ;;

 *.*.*.*/*.*.*.* ) read IP NETMASK <<< $( tr '/' ' ' <<< ${parm} )
                   bond_info[IP]="${IP}"
                   bond_info[NETMASK]="${NETMASK}"
                   ;;
    esac
  done

  cat << EOB > /etc/sysconfig/network-scripts/ifcfg-${bond}
NAME=${bond}
DEVICE=${bond}
TYPE=Bond
ONBOOT=${bond_info[ONBOOT]}
NM_CONTROLLED=${bond_info[NM_CONTROLLED]}
BOOTPROTO=${bond_info[PROTO]}
EOB

  [[ ${bond_opts[${bond}]} ]] && cat << EOB >> /etc/sysconfig/network-scripts/ifcfg-${bond}
BONDING_OPTS="$( tr -d '\r' <<< ${bond_opts[$bond]} )"
EOB

  [[ "${bond_info[PROTO]}" = "static" ]] && cat << EOB >> /etc/sysconfig/network-scripts/ifcfg-${bond}
IPADDR=${bond_info[IP]}
NETMASK=${bond_info[NETMASK]}
EOB

  [[ "${bond_info[PROMISC]}" = "yes" ]] && cat << EOB >> /etc/sysconfig/network-scripts/ifcfg-${bond}
PROMISC=${bond_info[PROMISC]}
EOB

  [[ "${bond_info[VLAN]}" = "yes" ]] && {
    cat << EOB >> /etc/sysconfig/network-scripts/ifcfg-${bond}
VLAN=${bond_info[VLAN]}
EOB
  } || {
    cat << EOB >> /etc/sysconfig/network-scripts/ifcfg-${bond}
BONDING_MASTER=yes
EOB
  }


for iface in $( tr -d '\r' <<< ${bond_ifaces[$bond]} )
do
  unset mac
  mac=$( ip addr sh dev ${iface} | awk '/link/ {print $2}' )

  cat << EOI > /etc/sysconfig/network-scripts/ifcfg-${iface}
NAME=${iface}
DEVICE=${iface}
TYPE=Ethernet
HWADDR=${mac}
BOOTPROTO=none
ONBOOT=${bond_info[ONBOOT]}
MASTER=${bond}
SLAVE=yes
NM_CONTROLLED=no
EOI
  done

done



# Configure Bridges
#
for bridge in ${!bridges[@]}
do
  read parms <<< $( tr -d '\r' <<< ${bridges[$bridge]} )

  unset bridge_info
  declare -A bridge_info=(  \
                         [DEVICE]="${bond}" \
                         [PROTO]="dhcp" \
                         [ONBOOT]="no"      \
                         [NM_CONTROLLED]="no"      \
                         )

  for parm in ${parms}
  do
    case $parm in
          onboot ) bridge_info[ONBOOT]="yes"
                   ;;

            none ) bridge_info[PROTO]="none"
                   ;;

          static ) bridge_info[PROTO]="static"
                   ;;

            dhcp ) bridge_info[PROTO]="dhcp"
                   ;;

 *.*.*.*/*.*.*.* ) read IP NETMASK <<< $( tr '/' ' ' <<< ${parm} )
                   bridge_info[IP]="${IP}"
                   bridge_info[NETMASK]="${NETMASK}"
                   ;;
    esac
  done


  cat << EOB > /etc/sysconfig/network-scripts/ifcfg-${bridge}
NAME=${bridge}
DEVICE=${bridge}
TYPE=Bridge
ONBOOT=${bridge_info[ONBOOT]}
NM_CONTROLLED=${bridge_info[NM_CONTROLLED]}
BOOTPROTO=${bridge_info[PROTO]}
EOB

  [[ "${bridge_info[PROTO]}" = "static" ]] && cat << EOB >> /etc/sysconfig/network-scripts/ifcfg-${bridge}
IPADDR=${bridge_info[IP]}
NETMASK=${bridge_info[NETMASK]}
EOB

  [[ "${bridge_iface[${bridge}]}" ]] && echo "BRIDGE=${bridge}" >> /etc/sysconfig/network-scripts/ifcfg-${bridge_iface[${bridge}]}

done


[[ ${AnacondaIface_noboot} ]] && { 
  sed -i -e '/DEFROUTE=/d' /etc/sysconfig/network-scripts/ifcfg-${AnacondaIface_device} 
  sed -i -e '/ONBOOT=/d' /etc/sysconfig/network-scripts/ifcfg-${AnacondaIface_device} 
  echo "ONBOOT=no" >> /etc/sysconfig/network-scripts/ifcfg-${AnacondaIface_device} 
  }


%end